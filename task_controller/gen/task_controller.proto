syntax = "proto3";

package TaskController;

// The task controller service definition.
service TaskController {
    // Add a task
    rpc AddTask (AddTaskReq) returns (AddTaskResp) {
    }

    // Start a task
    rpc StartTask (StartTaskReq) returns (StartTaskResp) {
    }

    // Stop a task
    rpc StopTask (StopTaskReq) returns (StopTaskResp) {
    }

    // It will be called when task finished
    rpc FinishTask (FinishTaskReq) returns (FinishTaskResp) {
    }

    // Get all tasks
    rpc GetAllTasks (GetAllTasksReq) returns (GetAllTasksResp) {
    }

    // Get task information
    rpc GetTaskInfo (GetTaskInfoReq) returns (GetTaskInfoResp) {
    }

    // Update a task
    rpc UpdateTask (UpdateTaskReq) returns (UpdateTaskResp) {
    }

    // Add task script log, will be called by task runtime
    rpc AddCustomLogCallback (AddCustomLogCallbackReq) returns (AddCustomLogCallbackResp) {
    }

    rpc SendMessage (SendMessageReq) returns (SendMessageResp) {
    }
}

message SendMessageReq {
    string message = 1;
}

message SendMessageResp {
    Response resp = 1;
}

message FinishTaskReq {
    int64 task_id = 1;
}

message FinishTaskResp {
    Response resp = 1;
}

message StartTaskReq {
    int64 task_id = 1;
    int64 start_time = 2;
}

message StartTaskResp {
    Response resp = 1;
}

message AddCustomLogCallbackReq {
    CustomLog custom_log = 1;
}

message AddCustomLogCallbackResp {
    Response resp = 1;
}

message CustomLog {
    int64 task_id = 1;
    string content = 2;
    int64 time = 3;
}

message AddTaskReq {
    Task task = 1;
}
message AddTaskResp {
    Response resp = 1;
}

message StopTaskReq {
    int64 task_id = 1;
    int64 stop_time = 2;
}
message StopTaskResp {
    Response resp = 1;
}

message GetAllTasksReq {
}

message GetAllTasksResp {
    Response resp = 1;
}

message GetTaskInfoReq {
    int64 task_id = 1;
}
message GetTaskInfoResp {
    Response resp = 1;
    Task task = 2;
}

message UpdateTaskReq {
    Task task = 1;
}
message UpdateTaskResp {
    Response resp = 1;
}


message Task {
    int64 task_id = 1;
    string name = 2;
    int32 create_time = 3;
    int32 start_time = 4;
    int64 end_time = 5;
    int32 union_train = 6;
    string edgenodes = 7;
    string file = 8;
}


message Response {
    int32 code = 1;
    string message = 2;
}

// python -m grpc_tools.protoc -I. --python_out=. --grpc_python_out=. ./task_controller/gen/task_controller.proto